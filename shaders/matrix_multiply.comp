#version 450
layout (local_size_x = 16, local_size_y = 16, local_size_z = 4) in;

layout(binding = 0) readonly buffer InA {
    float in_a[];
};

layout(binding = 1) readonly buffer InB {
    float in_b[];
};

layout(binding = 2) writeonly buffer Product {
    float product[];
};

struct MatrixDims {
    uint cols;
    uint rows;
    uint layers;
    uint trans;
};

layout(push_constant) uniform Sizes {
    MatrixDims a_dim;
    MatrixDims b_dim;
    MatrixDims out_dim;
};

uvec3 gid = gl_GlobalInvocationID;

uint mat_idx(MatrixDims dim, uint row, uint col) {
    uint base = (gid.z % dim.layers) * (dim.cols * dim.rows); // Index by layer 
    if (bool(dim.trans)) {
        base += (row * dim.cols) + col;
    } else {
        base += (col * dim.cols) + row;
    }
    return base;
}

void main() {
    if (gid.x >= out_dim.cols || gid.y >= out_dim.rows || gid.z >= out_dim.layers) return;

    uint inner_rc = bool(a_dim.trans) ? a_dim.rows : a_dim.cols;

    float sum = 0.;
    for (uint i = 0; i < inner_rc; i++) {
        sum += in_a[mat_idx(a_dim, i, gid.y)] * in_b[mat_idx(b_dim, gid.x, i)];
    }
    product[mat_idx(out_dim, gid.x, gid.y)] = sum;
}
